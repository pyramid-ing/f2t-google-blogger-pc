generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id        Int      @id @default(1)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThumbnailLayout {
  id          String   @id @default(cuid())
  name        String
  data        Json // 각 요소에 대한 JSON 설정 (위치, 폰트, 배경이미지 등)
  description String?
  isDefault   Boolean  @default(false)
  previewUrl  String? // 미리보기 이미지 URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 기본 Job 모델
model Job {
  id           String    @id @default(cuid())
  type         String // JobType: 'post' | 'generate_topic'
  subject      String // 작업 제목
  desc         String // 작업 설명
  status       String    @default("pending") // JobStatus: 'request' | 'pending' | 'processing' | 'completed' | 'failed'
  priority     Int       @default(1)
  scheduledAt  DateTime
  startedAt    DateTime?
  completedAt  DateTime?
  resultMsg    String? // 결과 메시지
  resultUrl    String? // 결과 URL
  errorMessage String? // 에러 메시지
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // 로그
  logs JobLog[]

  // 블로그 작업 관련 데이터
  blogJob  BlogJob?
  topicJob TopicJob?
}

model JobLog {
  id        String   @id @default(cuid())
  jobId     String
  message   String
  level     String   @default("info") // 'info' | 'warn' | 'error'
  createdAt DateTime @default(now())

  // 관계
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

// 블로그 작업 모델
model BlogJob {
  id          String    @id @default(cuid())
  jobId       String    @unique // Job 모델과 1:1 관계
  title       String // 글 제목
  content     String // 글 내용
  status      String    @default("draft") // BlogJobStatus: 'draft' | 'published' | 'failed'
  publishedAt DateTime? // 발행 시간
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 관계
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model TopicJob {
  id           String   @id @default(cuid())
  jobId        String   @unique
  topic        String // 요청 주제
  limit        Int // 생성 개수
  result       Json? // 생성된 토픽 결과 (배열)
  status       String   @default("draft")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  xlsxFileName String?

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}
